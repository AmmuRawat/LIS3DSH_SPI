
lis3dsh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003454  08003454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800346c  0800346c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003474  08003474  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800347c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000001c  08003498  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003498  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e13  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001822  00000000  00000000  00029e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  0002b688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  0002bf40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020262  00000000  00000000  0002c730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075a2  00000000  00000000  0004c992  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c326b  00000000  00000000  00053f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011719f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000234c  00000000  00000000  0011721c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800343c 	.word	0x0800343c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	0800343c 	.word	0x0800343c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fad3 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f853 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f919 	bl	800070c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004da:	f000 f8b7 	bl	800064c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004de:	f000 f8eb 	bl	80006b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

    myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 80004e2:	2340      	movs	r3, #64	; 0x40
 80004e4:	703b      	strb	r3, [r7, #0]
  	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 80004e6:	2308      	movs	r3, #8
 80004e8:	707b      	strb	r3, [r7, #1]
  	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 80004ea:	23c0      	movs	r3, #192	; 0xc0
 80004ec:	70bb      	strb	r3, [r7, #2]
  	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 80004ee:	2307      	movs	r3, #7
 80004f0:	70fb      	strb	r3, [r7, #3]
  	myAccConfigDef.interruptEnable = true;
 80004f2:	2301      	movs	r3, #1
 80004f4:	713b      	strb	r3, [r7, #4]
  	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 80004f6:	463b      	mov	r3, r7
 80004f8:	4619      	mov	r1, r3
 80004fa:	4818      	ldr	r0, [pc, #96]	; (800055c <main+0x94>)
 80004fc:	f002 fd18 	bl	8002f30 <LIS3DSH_Init>

  	LIS3DSH_X_calibrate(-1000.0, 980.0);
 8000500:	eddf 0a17 	vldr	s1, [pc, #92]	; 8000560 <main+0x98>
 8000504:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000564 <main+0x9c>
 8000508:	f002 fed6 	bl	80032b8 <LIS3DSH_X_calibrate>
  	LIS3DSH_Y_calibrate(-1020.0, 1040.0);
 800050c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8000568 <main+0xa0>
 8000510:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800056c <main+0xa4>
 8000514:	f002 fefe 	bl	8003314 <LIS3DSH_Y_calibrate>
  	LIS3DSH_Z_calibrate(-920.0, 1040.0);
 8000518:	eddf 0a13 	vldr	s1, [pc, #76]	; 8000568 <main+0xa0>
 800051c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8000570 <main+0xa8>
 8000520:	f002 ff26 	bl	8003370 <LIS3DSH_Z_calibrate>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //if(drdyFlag == 1)
	  if(LIS3DSH_PollDRDY(1000) == true)
 8000524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000528:	f002 fe98 	bl	800325c <LIS3DSH_PollDRDY>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f8      	beq.n	8000524 <main+0x5c>
	  {
	  	//drdyFlag = 0;
	  	myData = LIS3DSH_GetDataScaled();
 8000532:	f002 fe11 	bl	8003158 <LIS3DSH_GetDataScaled>
 8000536:	eef0 6a40 	vmov.f32	s13, s0
 800053a:	eeb0 7a60 	vmov.f32	s14, s1
 800053e:	eef0 7a41 	vmov.f32	s15, s2
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <main+0xac>)
 8000544:	edc3 6a00 	vstr	s13, [r3]
 8000548:	ed83 7a01 	vstr	s14, [r3, #4]
 800054c:	edc3 7a02 	vstr	s15, [r3, #8]
	  	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000554:	4808      	ldr	r0, [pc, #32]	; (8000578 <main+0xb0>)
 8000556:	f000 fde8 	bl	800112a <HAL_GPIO_TogglePin>
	  if(LIS3DSH_PollDRDY(1000) == true)
 800055a:	e7e3      	b.n	8000524 <main+0x5c>
 800055c:	200000f4 	.word	0x200000f4
 8000560:	44750000 	.word	0x44750000
 8000564:	c47a0000 	.word	0xc47a0000
 8000568:	44820000 	.word	0x44820000
 800056c:	c47f0000 	.word	0xc47f0000
 8000570:	c4660000 	.word	0xc4660000
 8000574:	200000dc 	.word	0x200000dc
 8000578:	40020c00 	.word	0x40020c00

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 ff4d 	bl	800342a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <SystemClock_Config+0xc8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xcc>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ec:	2308      	movs	r3, #8
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005f0:	2332      	movs	r3, #50	; 0x32
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fdad 	bl	8001160 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f8f4 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f808 	bl	8001640 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000636:	f000 f8df 	bl	80007f8 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_SPI1_Init+0x68>)
 8000654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000658:	f44f 7282 	mov.w	r2, #260	; 0x104
 800065c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_SPI1_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800067c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000680:	2220      	movs	r2, #32
 8000682:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_SPI1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_SPI1_Init+0x64>)
 8000698:	220a      	movs	r2, #10
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_SPI1_Init+0x64>)
 800069e:	f001 f99b 	bl	80019d8 <HAL_SPI_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006a8:	f000 f8a6 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000f4 	.word	0x200000f4
 80006b4:	40013000 	.word	0x40013000

080006b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART1_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f001 ffe6 	bl	80026c0 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f87d 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000009c 	.word	0x2000009c
 8000708:	40011000 	.word	0x40011000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b30      	ldr	r3, [pc, #192]	; (80007e8 <MX_GPIO_Init+0xdc>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a2f      	ldr	r2, [pc, #188]	; (80007e8 <MX_GPIO_Init+0xdc>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_GPIO_Init+0xdc>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b29      	ldr	r3, [pc, #164]	; (80007e8 <MX_GPIO_Init+0xdc>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a28      	ldr	r2, [pc, #160]	; (80007e8 <MX_GPIO_Init+0xdc>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xdc>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_GPIO_Init+0xdc>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_GPIO_Init+0xdc>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xdc>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2108      	movs	r1, #8
 800077a:	481c      	ldr	r0, [pc, #112]	; (80007ec <MX_GPIO_Init+0xe0>)
 800077c:	f000 fcbc 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000786:	481a      	ldr	r0, [pc, #104]	; (80007f0 <MX_GPIO_Init+0xe4>)
 8000788:	f000 fcb6 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800078c:	2308      	movs	r3, #8
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <MX_GPIO_Init+0xe0>)
 80007a4:	f000 fb0e 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007a8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	4619      	mov	r1, r3
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <MX_GPIO_Init+0xe4>)
 80007c2:	f000 faff 	bl	8000dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c6:	2301      	movs	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_GPIO_Init+0xe8>)
 80007cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	4619      	mov	r1, r3
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0xe0>)
 80007da:	f000 faf3 	bl	8000dc4 <HAL_GPIO_Init>

}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40020c00 	.word	0x40020c00
 80007f4:	10110000 	.word	0x10110000

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <HAL_MspInit+0x4c>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a1d      	ldr	r2, [pc, #116]	; (80008ec <HAL_SPI_MspInit+0x94>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d133      	bne.n	80008e2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <HAL_SPI_MspInit+0x98>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <HAL_SPI_MspInit+0x98>)
 8000884:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <HAL_SPI_MspInit+0x98>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_SPI_MspInit+0x98>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_SPI_MspInit+0x98>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_SPI_MspInit+0x98>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008b2:	23e0      	movs	r3, #224	; 0xe0
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008c2:	2305      	movs	r3, #5
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <HAL_SPI_MspInit+0x9c>)
 80008ce:	f000 fa79 	bl	8000dc4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2023      	movs	r0, #35	; 0x23
 80008d8:	f000 fa1b 	bl	8000d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008dc:	2023      	movs	r0, #35	; 0x23
 80008de:	f000 fa34 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008e2:	bf00      	nop
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40020000 	.word	0x40020000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a19      	ldr	r2, [pc, #100]	; (800097c <HAL_UART_MspInit+0x84>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d12c      	bne.n	8000974 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a17      	ldr	r2, [pc, #92]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_UART_MspInit+0x88>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a10      	ldr	r2, [pc, #64]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_UART_MspInit+0x88>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000964:	2307      	movs	r3, #7
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <HAL_UART_MspInit+0x8c>)
 8000970:	f000 fa28 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000974:	bf00      	nop
 8000976:	3728      	adds	r7, #40	; 0x28
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40011000 	.word	0x40011000
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 f89e 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <SPI1_IRQHandler+0x10>)
 80009ea:	f001 fc39 	bl	8002260 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000f4 	.word	0x200000f4

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <SystemInit+0x28>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <SystemInit+0x28>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x28>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	609a      	str	r2, [r3, #8]
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a2a:	e003      	b.n	8000a34 <LoopCopyDataInit>

08000a2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a32:	3104      	adds	r1, #4

08000a34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a3c:	d3f6      	bcc.n	8000a2c <CopyDataInit>
  ldr  r2, =_sbss
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a40:	e002      	b.n	8000a48 <LoopFillZerobss>

08000a42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a44:	f842 3b04 	str.w	r3, [r2], #4

08000a48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a4c:	d3f9      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a4e:	f7ff ffd3 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a52:	f002 fcbb 	bl	80033cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a56:	f7ff fd37 	bl	80004c8 <main>
  bx  lr    
 8000a5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a60:	0800347c 	.word	0x0800347c
  ldr  r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a68:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8000a6c:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8000a70:	20000150 	.word	0x20000150

08000a74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <HAL_Init+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <HAL_Init+0x40>)
 8000a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_Init+0x40>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_Init+0x40>)
 8000a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x40>)
 8000a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f92b 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff feac 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f943 	bl	8000d66 <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f90b 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	2000014c 	.word	0x2000014c

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	2000014c 	.word	0x2000014c

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <__NVIC_EnableIRQ+0x38>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e100 	.word	0xe000e100

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff29 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff3e 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff31 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa2 	bl	8000cb8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	b083      	sub	sp, #12
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d004      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e00c      	b.n	8000db6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2205      	movs	r2, #5
 8000da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	e16b      	b.n	80010b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de0:	2201      	movs	r2, #1
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	697a      	ldr	r2, [r7, #20]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	f040 815a 	bne.w	80010b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d00b      	beq.n	8000e1e <HAL_GPIO_Init+0x5a>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e12:	2b11      	cmp	r3, #17
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b12      	cmp	r3, #18
 8000e1c:	d130      	bne.n	8000e80 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	091b      	lsrs	r3, r3, #4
 8000e6a:	f003 0201 	and.w	r2, r3, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d003      	beq.n	8000ec0 <HAL_GPIO_Init+0xfc>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b12      	cmp	r3, #18
 8000ebe:	d123      	bne.n	8000f08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	08da      	lsrs	r2, r3, #3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3208      	adds	r2, #8
 8000ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	f003 0307 	and.w	r3, r3, #7
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	691a      	ldr	r2, [r3, #16]
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	69b9      	ldr	r1, [r7, #24]
 8000f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0203 	and.w	r2, r3, #3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 80b4 	beq.w	80010b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <HAL_GPIO_Init+0x308>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a5e      	ldr	r2, [pc, #376]	; (80010cc <HAL_GPIO_Init+0x308>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b5c      	ldr	r3, [pc, #368]	; (80010cc <HAL_GPIO_Init+0x308>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f66:	4a5a      	ldr	r2, [pc, #360]	; (80010d0 <HAL_GPIO_Init+0x30c>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a51      	ldr	r2, [pc, #324]	; (80010d4 <HAL_GPIO_Init+0x310>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d02b      	beq.n	8000fea <HAL_GPIO_Init+0x226>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a50      	ldr	r2, [pc, #320]	; (80010d8 <HAL_GPIO_Init+0x314>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d025      	beq.n	8000fe6 <HAL_GPIO_Init+0x222>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	; (80010dc <HAL_GPIO_Init+0x318>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d01f      	beq.n	8000fe2 <HAL_GPIO_Init+0x21e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4e      	ldr	r2, [pc, #312]	; (80010e0 <HAL_GPIO_Init+0x31c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d019      	beq.n	8000fde <HAL_GPIO_Init+0x21a>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <HAL_GPIO_Init+0x320>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x216>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x212>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_GPIO_Init+0x328>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x20e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <HAL_GPIO_Init+0x32c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x20a>
 8000fca:	2307      	movs	r3, #7
 8000fcc:	e00e      	b.n	8000fec <HAL_GPIO_Init+0x228>
 8000fce:	2308      	movs	r3, #8
 8000fd0:	e00c      	b.n	8000fec <HAL_GPIO_Init+0x228>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e00a      	b.n	8000fec <HAL_GPIO_Init+0x228>
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	e008      	b.n	8000fec <HAL_GPIO_Init+0x228>
 8000fda:	2304      	movs	r3, #4
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x228>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x228>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x228>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x228>
 8000fea:	2300      	movs	r3, #0
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffc:	4934      	ldr	r1, [pc, #208]	; (80010d0 <HAL_GPIO_Init+0x30c>)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800100a:	4b3a      	ldr	r3, [pc, #232]	; (80010f4 <HAL_GPIO_Init+0x330>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800102e:	4a31      	ldr	r2, [pc, #196]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001034:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001058:	4a26      	ldr	r2, [pc, #152]	; (80010f4 <HAL_GPIO_Init+0x330>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105e:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_GPIO_Init+0x330>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ac:	4a11      	ldr	r2, [pc, #68]	; (80010f4 <HAL_GPIO_Init+0x330>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	f67f ae90 	bls.w	8000de0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c0:	bf00      	nop
 80010c2:	3724      	adds	r7, #36	; 0x24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40021400 	.word	0x40021400
 80010ec:	40021800 	.word	0x40021800
 80010f0:	40021c00 	.word	0x40021c00
 80010f4:	40013c00 	.word	0x40013c00

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001114:	e003      	b.n	800111e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695a      	ldr	r2, [r3, #20]
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	401a      	ands	r2, r3
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	429a      	cmp	r2, r3
 8001142:	d104      	bne.n	800114e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001144:	887b      	ldrh	r3, [r7, #2]
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800114c:	e002      	b.n	8001154 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800114e:	887a      	ldrh	r2, [r7, #2]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	619a      	str	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e25b      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d075      	beq.n	800126a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800117e:	4ba3      	ldr	r3, [pc, #652]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d00c      	beq.n	80011a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118a:	4ba0      	ldr	r3, [pc, #640]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001192:	2b08      	cmp	r3, #8
 8001194:	d112      	bne.n	80011bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001196:	4b9d      	ldr	r3, [pc, #628]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011a2:	d10b      	bne.n	80011bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b99      	ldr	r3, [pc, #612]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d05b      	beq.n	8001268 <HAL_RCC_OscConfig+0x108>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d157      	bne.n	8001268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e236      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d106      	bne.n	80011d4 <HAL_RCC_OscConfig+0x74>
 80011c6:	4b91      	ldr	r3, [pc, #580]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a90      	ldr	r2, [pc, #576]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01d      	b.n	8001210 <HAL_RCC_OscConfig+0xb0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011dc:	d10c      	bne.n	80011f8 <HAL_RCC_OscConfig+0x98>
 80011de:	4b8b      	ldr	r3, [pc, #556]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a8a      	ldr	r2, [pc, #552]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	4b88      	ldr	r3, [pc, #544]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a87      	ldr	r2, [pc, #540]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	e00b      	b.n	8001210 <HAL_RCC_OscConfig+0xb0>
 80011f8:	4b84      	ldr	r3, [pc, #528]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a83      	ldr	r2, [pc, #524]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b81      	ldr	r3, [pc, #516]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a80      	ldr	r2, [pc, #512]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800120a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800120e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d013      	beq.n	8001240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001218:	f7ff fc94 	bl	8000b44 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001220:	f7ff fc90 	bl	8000b44 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b64      	cmp	r3, #100	; 0x64
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e1fb      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001232:	4b76      	ldr	r3, [pc, #472]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f0      	beq.n	8001220 <HAL_RCC_OscConfig+0xc0>
 800123e:	e014      	b.n	800126a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fc80 	bl	8000b44 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fc7c 	bl	8000b44 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1e7      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	4b6c      	ldr	r3, [pc, #432]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0xe8>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d063      	beq.n	800133e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001276:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b00      	cmp	r3, #0
 8001280:	d00b      	beq.n	800129a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001282:	4b62      	ldr	r3, [pc, #392]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128a:	2b08      	cmp	r3, #8
 800128c:	d11c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800128e:	4b5f      	ldr	r3, [pc, #380]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d116      	bne.n	80012c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	4b5c      	ldr	r3, [pc, #368]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d005      	beq.n	80012b2 <HAL_RCC_OscConfig+0x152>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d001      	beq.n	80012b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e1bb      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4952      	ldr	r1, [pc, #328]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	e03a      	b.n	800133e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d020      	beq.n	8001312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_RCC_OscConfig+0x2b0>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff fc35 	bl	8000b44 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff fc31 	bl	8000b44 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e19c      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f0:	4b46      	ldr	r3, [pc, #280]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4940      	ldr	r1, [pc, #256]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_OscConfig+0x2b0>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001318:	f7ff fc14 	bl	8000b44 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fc10 	bl	8000b44 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e17b      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	2b00      	cmp	r3, #0
 8001348:	d030      	beq.n	80013ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d016      	beq.n	8001380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_RCC_OscConfig+0x2b4>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001358:	f7ff fbf4 	bl	8000b44 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff fbf0 	bl	8000b44 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e15b      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 8001374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x200>
 800137e:	e015      	b.n	80013ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <HAL_RCC_OscConfig+0x2b4>)
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fbdd 	bl	8000b44 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138e:	f7ff fbd9 	bl	8000b44 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e144      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a0:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f0      	bne.n	800138e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80a0 	beq.w	80014fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e6:	2301      	movs	r3, #1
 80013e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d121      	bne.n	800143a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a07      	ldr	r2, [pc, #28]	; (8001418 <HAL_RCC_OscConfig+0x2b8>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001402:	f7ff fb9f 	bl	8000b44 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001408:	e011      	b.n	800142e <HAL_RCC_OscConfig+0x2ce>
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	42470000 	.word	0x42470000
 8001414:	42470e80 	.word	0x42470e80
 8001418:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141c:	f7ff fb92 	bl	8000b44 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0fd      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x4d4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d106      	bne.n	8001450 <HAL_RCC_OscConfig+0x2f0>
 8001442:	4b7d      	ldr	r3, [pc, #500]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a7c      	ldr	r2, [pc, #496]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	e01c      	b.n	800148a <HAL_RCC_OscConfig+0x32a>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b05      	cmp	r3, #5
 8001456:	d10c      	bne.n	8001472 <HAL_RCC_OscConfig+0x312>
 8001458:	4b77      	ldr	r3, [pc, #476]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	4a76      	ldr	r2, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800145e:	f043 0304 	orr.w	r3, r3, #4
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
 8001464:	4b74      	ldr	r3, [pc, #464]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a73      	ldr	r2, [pc, #460]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	e00b      	b.n	800148a <HAL_RCC_OscConfig+0x32a>
 8001472:	4b71      	ldr	r3, [pc, #452]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a70      	ldr	r2, [pc, #448]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
 800147e:	4b6e      	ldr	r3, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a6d      	ldr	r2, [pc, #436]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001484:	f023 0304 	bic.w	r3, r3, #4
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d015      	beq.n	80014be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001492:	f7ff fb57 	bl	8000b44 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fb53 	bl	8000b44 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0bc      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	4b61      	ldr	r3, [pc, #388]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ee      	beq.n	800149a <HAL_RCC_OscConfig+0x33a>
 80014bc:	e014      	b.n	80014e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014be:	f7ff fb41 	bl	8000b44 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c4:	e00a      	b.n	80014dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c6:	f7ff fb3d 	bl	8000b44 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e0a6      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	4b56      	ldr	r3, [pc, #344]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1ee      	bne.n	80014c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d105      	bne.n	80014fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ee:	4b52      	ldr	r3, [pc, #328]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a51      	ldr	r2, [pc, #324]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80014f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8092 	beq.w	8001628 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001504:	4b4c      	ldr	r3, [pc, #304]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b08      	cmp	r3, #8
 800150e:	d05c      	beq.n	80015ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d141      	bne.n	800159c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001518:	4b48      	ldr	r3, [pc, #288]	; (800163c <HAL_RCC_OscConfig+0x4dc>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fb11 	bl	8000b44 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fb0d 	bl	8000b44 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e078      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001538:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f0      	bne.n	8001526 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69da      	ldr	r2, [r3, #28]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	431a      	orrs	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	019b      	lsls	r3, r3, #6
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	3b01      	subs	r3, #1
 800155e:	041b      	lsls	r3, r3, #16
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	061b      	lsls	r3, r3, #24
 8001568:	4933      	ldr	r1, [pc, #204]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <HAL_RCC_OscConfig+0x4dc>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fae6 	bl	8000b44 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fae2 	bl	8000b44 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e04d      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x41c>
 800159a:	e045      	b.n	8001628 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_RCC_OscConfig+0x4dc>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a2:	f7ff facf 	bl	8000b44 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff facb 	bl	8000b44 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e036      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x44a>
 80015c8:	e02e      	b.n	8001628 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e029      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <HAL_RCC_OscConfig+0x4d8>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d11c      	bne.n	8001624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d115      	bne.n	8001624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015fe:	4013      	ands	r3, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001604:	4293      	cmp	r3, r2
 8001606:	d10d      	bne.n	8001624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000
 8001638:	40023800 	.word	0x40023800
 800163c:	42470060 	.word	0x42470060

08001640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cc      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d90c      	bls.n	800167c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d044      	beq.n	8001760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d119      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e067      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4934      	ldr	r1, [pc, #208]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001730:	f7ff fa08 	bl	8000b44 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff fa04 	bl	8000b44 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e04f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d20c      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4601      	mov	r1, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	fa21 f303 	lsr.w	r3, r1, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f968 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	08003454 	.word	0x08003454
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001822:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d007      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0x32>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d008      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x38>
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 808d 	bne.w	8001952 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <HAL_RCC_GetSysClockFreq+0x15c>)
 800183a:	60bb      	str	r3, [r7, #8]
       break;
 800183c:	e08c      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183e:	4b4b      	ldr	r3, [pc, #300]	; (800196c <HAL_RCC_GetSysClockFreq+0x160>)
 8001840:	60bb      	str	r3, [r7, #8]
      break;
 8001842:	e089      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184e:	4b45      	ldr	r3, [pc, #276]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d023      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	f04f 0400 	mov.w	r4, #0
 8001864:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	ea03 0501 	and.w	r5, r3, r1
 8001870:	ea04 0602 	and.w	r6, r4, r2
 8001874:	4a3d      	ldr	r2, [pc, #244]	; (800196c <HAL_RCC_GetSysClockFreq+0x160>)
 8001876:	fb02 f106 	mul.w	r1, r2, r6
 800187a:	2200      	movs	r2, #0
 800187c:	fb02 f205 	mul.w	r2, r2, r5
 8001880:	440a      	add	r2, r1
 8001882:	493a      	ldr	r1, [pc, #232]	; (800196c <HAL_RCC_GetSysClockFreq+0x160>)
 8001884:	fba5 0101 	umull	r0, r1, r5, r1
 8001888:	1853      	adds	r3, r2, r1
 800188a:	4619      	mov	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f04f 0400 	mov.w	r4, #0
 8001892:	461a      	mov	r2, r3
 8001894:	4623      	mov	r3, r4
 8001896:	f7fe fc97 	bl	80001c8 <__aeabi_uldivmod>
 800189a:	4603      	mov	r3, r0
 800189c:	460c      	mov	r4, r1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e049      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	f04f 0400 	mov.w	r4, #0
 80018ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	ea03 0501 	and.w	r5, r3, r1
 80018b8:	ea04 0602 	and.w	r6, r4, r2
 80018bc:	4629      	mov	r1, r5
 80018be:	4632      	mov	r2, r6
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	f04f 0400 	mov.w	r4, #0
 80018c8:	0154      	lsls	r4, r2, #5
 80018ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ce:	014b      	lsls	r3, r1, #5
 80018d0:	4619      	mov	r1, r3
 80018d2:	4622      	mov	r2, r4
 80018d4:	1b49      	subs	r1, r1, r5
 80018d6:	eb62 0206 	sbc.w	r2, r2, r6
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	f04f 0400 	mov.w	r4, #0
 80018e2:	0194      	lsls	r4, r2, #6
 80018e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018e8:	018b      	lsls	r3, r1, #6
 80018ea:	1a5b      	subs	r3, r3, r1
 80018ec:	eb64 0402 	sbc.w	r4, r4, r2
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	00e2      	lsls	r2, r4, #3
 80018fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018fe:	00d9      	lsls	r1, r3, #3
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	195b      	adds	r3, r3, r5
 8001906:	eb44 0406 	adc.w	r4, r4, r6
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	02a2      	lsls	r2, r4, #10
 8001914:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001918:	0299      	lsls	r1, r3, #10
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	4618      	mov	r0, r3
 8001920:	4621      	mov	r1, r4
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	f7fe fc4c 	bl	80001c8 <__aeabi_uldivmod>
 8001930:	4603      	mov	r3, r0
 8001932:	460c      	mov	r4, r1
 8001934:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0c1b      	lsrs	r3, r3, #16
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	3301      	adds	r3, #1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	60bb      	str	r3, [r7, #8]
      break;
 8001950:	e002      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001954:	60bb      	str	r3, [r7, #8]
      break;
 8001956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001958:	68bb      	ldr	r3, [r7, #8]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400
 800196c:	017d7840 	.word	0x017d7840

08001970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_RCC_GetHCLKFreq+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800198c:	f7ff fff0 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 8001990:	4601      	mov	r1, r0
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	0a9b      	lsrs	r3, r3, #10
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	4a03      	ldr	r2, [pc, #12]	; (80019ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	08003464 	.word	0x08003464

080019b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019b4:	f7ff ffdc 	bl	8001970 <HAL_RCC_GetHCLKFreq>
 80019b8:	4601      	mov	r1, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0b5b      	lsrs	r3, r3, #13
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4a03      	ldr	r2, [pc, #12]	; (80019d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c6:	5cd3      	ldrb	r3, [r2, r3]
 80019c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	08003464 	.word	0x08003464

080019d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e056      	b.n	8001a98 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d106      	bne.n	8001a0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7fe ff27 	bl	8000858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	431a      	orrs	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	ea42 0103 	orr.w	r1, r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	f003 0104 	and.w	r1, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d101      	bne.n	8001ac2 <HAL_SPI_Transmit+0x22>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e11e      	b.n	8001d00 <HAL_SPI_Transmit+0x260>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001aca:	f7ff f83b 	bl	8000b44 <HAL_GetTick>
 8001ace:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d002      	beq.n	8001ae6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001ae4:	e103      	b.n	8001cee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_SPI_Transmit+0x52>
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d102      	bne.n	8001af8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001af6:	e0fa      	b.n	8001cee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2203      	movs	r2, #3
 8001afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	88fa      	ldrh	r2, [r7, #6]
 8001b10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	88fa      	ldrh	r2, [r7, #6]
 8001b16:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b3e:	d107      	bne.n	8001b50 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5a:	2b40      	cmp	r3, #64	; 0x40
 8001b5c:	d007      	beq.n	8001b6e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b76:	d14b      	bne.n	8001c10 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_SPI_Transmit+0xe6>
 8001b80:	8afb      	ldrh	r3, [r7, #22]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d13e      	bne.n	8001c04 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	881a      	ldrh	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	1c9a      	adds	r2, r3, #2
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001baa:	e02b      	b.n	8001c04 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d112      	bne.n	8001be0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	881a      	ldrh	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	1c9a      	adds	r2, r3, #2
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001bde:	e011      	b.n	8001c04 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001be0:	f7fe ffb0 	bl	8000b44 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d803      	bhi.n	8001bf8 <HAL_SPI_Transmit+0x158>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	d102      	bne.n	8001bfe <HAL_SPI_Transmit+0x15e>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c02:	e074      	b.n	8001cee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1ce      	bne.n	8001bac <HAL_SPI_Transmit+0x10c>
 8001c0e:	e04c      	b.n	8001caa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_SPI_Transmit+0x17e>
 8001c18:	8afb      	ldrh	r3, [r7, #22]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d140      	bne.n	8001ca0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	330c      	adds	r3, #12
 8001c28:	7812      	ldrb	r2, [r2, #0]
 8001c2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c44:	e02c      	b.n	8001ca0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d113      	bne.n	8001c7c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c7a:	e011      	b.n	8001ca0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c7c:	f7fe ff62 	bl	8000b44 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d803      	bhi.n	8001c94 <HAL_SPI_Transmit+0x1f4>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c92:	d102      	bne.n	8001c9a <HAL_SPI_Transmit+0x1fa>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c9e:	e026      	b.n	8001cee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1cd      	bne.n	8001c46 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	6839      	ldr	r1, [r7, #0]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fcc4 	bl	800263c <SPI_EndRxTxTransaction>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]
 8001cea:	e000      	b.n	8001cee <HAL_SPI_Transmit+0x24e>
  }

error:
 8001cec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d24:	d112      	bne.n	8001d4c <HAL_SPI_Receive+0x44>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10e      	bne.n	8001d4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2204      	movs	r2, #4
 8001d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001d36:	88fa      	ldrh	r2, [r7, #6]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f8e9 	bl	8001f1a <HAL_SPI_TransmitReceive>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	e0e2      	b.n	8001f12 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d101      	bne.n	8001d5a <HAL_SPI_Receive+0x52>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e0db      	b.n	8001f12 <HAL_SPI_Receive+0x20a>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d62:	f7fe feef 	bl	8000b44 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d002      	beq.n	8001d7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001d74:	2302      	movs	r3, #2
 8001d76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d78:	e0c2      	b.n	8001f00 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <HAL_SPI_Receive+0x7e>
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001d8a:	e0b9      	b.n	8001f00 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2204      	movs	r2, #4
 8001d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	88fa      	ldrh	r2, [r7, #6]
 8001da4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd2:	d107      	bne.n	8001de4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001de2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d007      	beq.n	8001e02 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d162      	bne.n	8001ed0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e0a:	e02e      	b.n	8001e6a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d115      	bne.n	8001e46 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f103 020c 	add.w	r2, r3, #12
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e44:	e011      	b.n	8001e6a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e46:	f7fe fe7d 	bl	8000b44 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d803      	bhi.n	8001e5e <HAL_SPI_Receive+0x156>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d102      	bne.n	8001e64 <HAL_SPI_Receive+0x15c>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001e68:	e04a      	b.n	8001f00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1cb      	bne.n	8001e0c <HAL_SPI_Receive+0x104>
 8001e74:	e031      	b.n	8001eda <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d113      	bne.n	8001eac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8e:	b292      	uxth	r2, r2
 8001e90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e96:	1c9a      	adds	r2, r3, #2
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001eaa:	e011      	b.n	8001ed0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eac:	f7fe fe4a 	bl	8000b44 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d803      	bhi.n	8001ec4 <HAL_SPI_Receive+0x1bc>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec2:	d102      	bne.n	8001eca <HAL_SPI_Receive+0x1c2>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ece:	e017      	b.n	8001f00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1cd      	bne.n	8001e76 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	6839      	ldr	r1, [r7, #0]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f000 fb46 	bl	8002570 <SPI_EndRxTransaction>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
 8001efc:	e000      	b.n	8001f00 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001efe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b08c      	sub	sp, #48	; 0x30
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	60f8      	str	r0, [r7, #12]
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_SPI_TransmitReceive+0x26>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e18a      	b.n	8002256 <HAL_SPI_TransmitReceive+0x33c>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f48:	f7fe fdfc 	bl	8000b44 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d00f      	beq.n	8001f8a <HAL_SPI_TransmitReceive+0x70>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f70:	d107      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <HAL_SPI_TransmitReceive+0x68>
 8001f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d003      	beq.n	8001f8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001f88:	e15b      	b.n	8002242 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_SPI_TransmitReceive+0x82>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_SPI_TransmitReceive+0x82>
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001fa2:	e14e      	b.n	8002242 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d003      	beq.n	8001fb8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	887a      	ldrh	r2, [r7, #2]
 8001fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	887a      	ldrh	r2, [r7, #2]
 8001fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	887a      	ldrh	r2, [r7, #2]
 8001fda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b40      	cmp	r3, #64	; 0x40
 8001ffa:	d007      	beq.n	800200c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800200a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002014:	d178      	bne.n	8002108 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_SPI_TransmitReceive+0x10a>
 800201e:	8b7b      	ldrh	r3, [r7, #26]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d166      	bne.n	80020f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	1c9a      	adds	r2, r3, #2
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002048:	e053      	b.n	80020f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b02      	cmp	r3, #2
 8002056:	d11b      	bne.n	8002090 <HAL_SPI_TransmitReceive+0x176>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_SPI_TransmitReceive+0x176>
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d113      	bne.n	8002090 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	881a      	ldrh	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002078:	1c9a      	adds	r2, r3, #2
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d119      	bne.n	80020d2 <HAL_SPI_TransmitReceive+0x1b8>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d014      	beq.n	80020d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b2:	b292      	uxth	r2, r2
 80020b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	1c9a      	adds	r2, r3, #2
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020ce:	2301      	movs	r3, #1
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020d2:	f7fe fd37 	bl	8000b44 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020de:	429a      	cmp	r2, r3
 80020e0:	d807      	bhi.n	80020f2 <HAL_SPI_TransmitReceive+0x1d8>
 80020e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d003      	beq.n	80020f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80020f0:	e0a7      	b.n	8002242 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1a6      	bne.n	800204a <HAL_SPI_TransmitReceive+0x130>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002100:	b29b      	uxth	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1a1      	bne.n	800204a <HAL_SPI_TransmitReceive+0x130>
 8002106:	e07c      	b.n	8002202 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d002      	beq.n	8002116 <HAL_SPI_TransmitReceive+0x1fc>
 8002110:	8b7b      	ldrh	r3, [r7, #26]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d16b      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	330c      	adds	r3, #12
 8002120:	7812      	ldrb	r2, [r2, #0]
 8002122:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800213c:	e057      	b.n	80021ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b02      	cmp	r3, #2
 800214a:	d11c      	bne.n	8002186 <HAL_SPI_TransmitReceive+0x26c>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d017      	beq.n	8002186 <HAL_SPI_TransmitReceive+0x26c>
 8002156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002158:	2b01      	cmp	r3, #1
 800215a:	d114      	bne.n	8002186 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	330c      	adds	r3, #12
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b01      	cmp	r3, #1
 8002192:	d119      	bne.n	80021c8 <HAL_SPI_TransmitReceive+0x2ae>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d014      	beq.n	80021c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021c4:	2301      	movs	r3, #1
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021c8:	f7fe fcbc 	bl	8000b44 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d803      	bhi.n	80021e0 <HAL_SPI_TransmitReceive+0x2c6>
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d102      	bne.n	80021e6 <HAL_SPI_TransmitReceive+0x2cc>
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d103      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021ec:	e029      	b.n	8002242 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1a2      	bne.n	800213e <HAL_SPI_TransmitReceive+0x224>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d19d      	bne.n	800213e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa18 	bl	800263c <SPI_EndRxTxTransaction>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800221e:	e010      	b.n	8002242 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	e000      	b.n	8002242 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002240:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002252:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002256:	4618      	mov	r0, r3
 8002258:	3730      	adds	r7, #48	; 0x30
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	099b      	lsrs	r3, r3, #6
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10f      	bne.n	80022a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
    return;
 80022a2:	e0d8      	b.n	8002456 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_SPI_IRQHandler+0x66>
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	09db      	lsrs	r3, r3, #7
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	4798      	blx	r3
    return;
 80022c4:	e0c7      	b.n	8002456 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_SPI_IRQHandler+0x8c>
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80b5 	beq.w	8002456 <HAL_SPI_IRQHandler+0x1f6>
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80ae 	beq.w	8002456 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d023      	beq.n	800234e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b03      	cmp	r3, #3
 8002310:	d011      	beq.n	8002336 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002316:	f043 0204 	orr.w	r2, r3, #4
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	e00b      	b.n	800234e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]
        return;
 800234c:	e083      	b.n	8002456 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d014      	beq.n	8002384 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f043 0201 	orr.w	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f043 0208 	orr.w	r2, r3, #8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d050      	beq.n	8002454 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023c0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <HAL_SPI_IRQHandler+0x17e>
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d034      	beq.n	8002448 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0203 	bic.w	r2, r2, #3
 80023ec:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d011      	beq.n	800241a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a18      	ldr	r2, [pc, #96]	; (800245c <HAL_SPI_IRQHandler+0x1fc>)
 80023fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fcbb 	bl	8000d7e <HAL_DMA_Abort_IT>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002412:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002426:	4a0d      	ldr	r2, [pc, #52]	; (800245c <HAL_SPI_IRQHandler+0x1fc>)
 8002428:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fca5 	bl	8000d7e <HAL_DMA_Abort_IT>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002446:	e003      	b.n	8002450 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f809 	bl	8002460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800244e:	e000      	b.n	8002452 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002450:	bf00      	nop
    return;
 8002452:	bf00      	nop
 8002454:	bf00      	nop
  }
}
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08002475 	.word	0x08002475

08002460 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff ffe6 	bl	8002460 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024ac:	e04c      	b.n	8002548 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d048      	beq.n	8002548 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80024b6:	f7fe fb45 	bl	8000b44 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d902      	bls.n	80024cc <SPI_WaitFlagStateUntilTimeout+0x30>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d13d      	bne.n	8002548 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e4:	d111      	bne.n	800250a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ee:	d004      	beq.n	80024fa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f8:	d107      	bne.n	800250a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002508:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002512:	d10f      	bne.n	8002534 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002532:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e00f      	b.n	8002568 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4013      	ands	r3, r2
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	429a      	cmp	r2, r3
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	429a      	cmp	r2, r3
 8002564:	d1a3      	bne.n	80024ae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002584:	d111      	bne.n	80025aa <SPI_EndRxTransaction+0x3a>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800258e:	d004      	beq.n	800259a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002598:	d107      	bne.n	80025aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b2:	d12a      	bne.n	800260a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025bc:	d012      	beq.n	80025e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff ff67 	bl	800249c <SPI_WaitFlagStateUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02d      	beq.n	8002630 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d8:	f043 0220 	orr.w	r2, r3, #32
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e026      	b.n	8002632 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	2101      	movs	r1, #1
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7ff ff54 	bl	800249c <SPI_WaitFlagStateUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01a      	beq.n	8002630 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	f043 0220 	orr.w	r2, r3, #32
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e013      	b.n	8002632 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2200      	movs	r2, #0
 8002612:	2101      	movs	r1, #1
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff ff41 	bl	800249c <SPI_WaitFlagStateUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e000      	b.n	8002632 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <SPI_EndRxTxTransaction+0x7c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <SPI_EndRxTxTransaction+0x80>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0d5b      	lsrs	r3, r3, #21
 8002654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002666:	d112      	bne.n	800268e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff ff12 	bl	800249c <SPI_WaitFlagStateUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e00f      	b.n	80026ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3b01      	subs	r3, #1
 8002698:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d0f2      	beq.n	800268e <SPI_EndRxTxTransaction+0x52>
 80026a8:	e000      	b.n	80026ac <SPI_EndRxTxTransaction+0x70>
        break;
 80026aa:	bf00      	nop
  }

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000
 80026bc:	165e9f81 	.word	0x165e9f81

080026c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e03f      	b.n	8002752 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f906 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2224      	movs	r2, #36	; 0x24
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f829 	bl	800275c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	695a      	ldr	r2, [r3, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68da      	ldr	r2, [r3, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800275c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	430a      	orrs	r2, r1
 800277a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	431a      	orrs	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	4313      	orrs	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800279e:	f023 030c 	bic.w	r3, r3, #12
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	430b      	orrs	r3, r1
 80027aa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ca:	f040 818b 	bne.w	8002ae4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4ac1      	ldr	r2, [pc, #772]	; (8002ad8 <UART_SetConfig+0x37c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d005      	beq.n	80027e4 <UART_SetConfig+0x88>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4abf      	ldr	r2, [pc, #764]	; (8002adc <UART_SetConfig+0x380>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 80bd 	bne.w	800295e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027e4:	f7ff f8e4 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 80027e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	461d      	mov	r5, r3
 80027ee:	f04f 0600 	mov.w	r6, #0
 80027f2:	46a8      	mov	r8, r5
 80027f4:	46b1      	mov	r9, r6
 80027f6:	eb18 0308 	adds.w	r3, r8, r8
 80027fa:	eb49 0409 	adc.w	r4, r9, r9
 80027fe:	4698      	mov	r8, r3
 8002800:	46a1      	mov	r9, r4
 8002802:	eb18 0805 	adds.w	r8, r8, r5
 8002806:	eb49 0906 	adc.w	r9, r9, r6
 800280a:	f04f 0100 	mov.w	r1, #0
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002816:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800281a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800281e:	4688      	mov	r8, r1
 8002820:	4691      	mov	r9, r2
 8002822:	eb18 0005 	adds.w	r0, r8, r5
 8002826:	eb49 0106 	adc.w	r1, r9, r6
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	461d      	mov	r5, r3
 8002830:	f04f 0600 	mov.w	r6, #0
 8002834:	196b      	adds	r3, r5, r5
 8002836:	eb46 0406 	adc.w	r4, r6, r6
 800283a:	461a      	mov	r2, r3
 800283c:	4623      	mov	r3, r4
 800283e:	f7fd fcc3 	bl	80001c8 <__aeabi_uldivmod>
 8002842:	4603      	mov	r3, r0
 8002844:	460c      	mov	r4, r1
 8002846:	461a      	mov	r2, r3
 8002848:	4ba5      	ldr	r3, [pc, #660]	; (8002ae0 <UART_SetConfig+0x384>)
 800284a:	fba3 2302 	umull	r2, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	461d      	mov	r5, r3
 8002858:	f04f 0600 	mov.w	r6, #0
 800285c:	46a9      	mov	r9, r5
 800285e:	46b2      	mov	sl, r6
 8002860:	eb19 0309 	adds.w	r3, r9, r9
 8002864:	eb4a 040a 	adc.w	r4, sl, sl
 8002868:	4699      	mov	r9, r3
 800286a:	46a2      	mov	sl, r4
 800286c:	eb19 0905 	adds.w	r9, r9, r5
 8002870:	eb4a 0a06 	adc.w	sl, sl, r6
 8002874:	f04f 0100 	mov.w	r1, #0
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002880:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002884:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002888:	4689      	mov	r9, r1
 800288a:	4692      	mov	sl, r2
 800288c:	eb19 0005 	adds.w	r0, r9, r5
 8002890:	eb4a 0106 	adc.w	r1, sl, r6
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	461d      	mov	r5, r3
 800289a:	f04f 0600 	mov.w	r6, #0
 800289e:	196b      	adds	r3, r5, r5
 80028a0:	eb46 0406 	adc.w	r4, r6, r6
 80028a4:	461a      	mov	r2, r3
 80028a6:	4623      	mov	r3, r4
 80028a8:	f7fd fc8e 	bl	80001c8 <__aeabi_uldivmod>
 80028ac:	4603      	mov	r3, r0
 80028ae:	460c      	mov	r4, r1
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b8b      	ldr	r3, [pc, #556]	; (8002ae0 <UART_SetConfig+0x384>)
 80028b4:	fba3 1302 	umull	r1, r3, r3, r2
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	2164      	movs	r1, #100	; 0x64
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	3332      	adds	r3, #50	; 0x32
 80028c6:	4a86      	ldr	r2, [pc, #536]	; (8002ae0 <UART_SetConfig+0x384>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028d4:	4498      	add	r8, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	461d      	mov	r5, r3
 80028da:	f04f 0600 	mov.w	r6, #0
 80028de:	46a9      	mov	r9, r5
 80028e0:	46b2      	mov	sl, r6
 80028e2:	eb19 0309 	adds.w	r3, r9, r9
 80028e6:	eb4a 040a 	adc.w	r4, sl, sl
 80028ea:	4699      	mov	r9, r3
 80028ec:	46a2      	mov	sl, r4
 80028ee:	eb19 0905 	adds.w	r9, r9, r5
 80028f2:	eb4a 0a06 	adc.w	sl, sl, r6
 80028f6:	f04f 0100 	mov.w	r1, #0
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002902:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002906:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800290a:	4689      	mov	r9, r1
 800290c:	4692      	mov	sl, r2
 800290e:	eb19 0005 	adds.w	r0, r9, r5
 8002912:	eb4a 0106 	adc.w	r1, sl, r6
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	461d      	mov	r5, r3
 800291c:	f04f 0600 	mov.w	r6, #0
 8002920:	196b      	adds	r3, r5, r5
 8002922:	eb46 0406 	adc.w	r4, r6, r6
 8002926:	461a      	mov	r2, r3
 8002928:	4623      	mov	r3, r4
 800292a:	f7fd fc4d 	bl	80001c8 <__aeabi_uldivmod>
 800292e:	4603      	mov	r3, r0
 8002930:	460c      	mov	r4, r1
 8002932:	461a      	mov	r2, r3
 8002934:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <UART_SetConfig+0x384>)
 8002936:	fba3 1302 	umull	r1, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2164      	movs	r1, #100	; 0x64
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	3332      	adds	r3, #50	; 0x32
 8002948:	4a65      	ldr	r2, [pc, #404]	; (8002ae0 <UART_SetConfig+0x384>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	f003 0207 	and.w	r2, r3, #7
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4442      	add	r2, r8
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e26f      	b.n	8002e3e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800295e:	f7ff f813 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8002962:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	461d      	mov	r5, r3
 8002968:	f04f 0600 	mov.w	r6, #0
 800296c:	46a8      	mov	r8, r5
 800296e:	46b1      	mov	r9, r6
 8002970:	eb18 0308 	adds.w	r3, r8, r8
 8002974:	eb49 0409 	adc.w	r4, r9, r9
 8002978:	4698      	mov	r8, r3
 800297a:	46a1      	mov	r9, r4
 800297c:	eb18 0805 	adds.w	r8, r8, r5
 8002980:	eb49 0906 	adc.w	r9, r9, r6
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002990:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002994:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002998:	4688      	mov	r8, r1
 800299a:	4691      	mov	r9, r2
 800299c:	eb18 0005 	adds.w	r0, r8, r5
 80029a0:	eb49 0106 	adc.w	r1, r9, r6
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	461d      	mov	r5, r3
 80029aa:	f04f 0600 	mov.w	r6, #0
 80029ae:	196b      	adds	r3, r5, r5
 80029b0:	eb46 0406 	adc.w	r4, r6, r6
 80029b4:	461a      	mov	r2, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	f7fd fc06 	bl	80001c8 <__aeabi_uldivmod>
 80029bc:	4603      	mov	r3, r0
 80029be:	460c      	mov	r4, r1
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <UART_SetConfig+0x384>)
 80029c4:	fba3 2302 	umull	r2, r3, r3, r2
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	461d      	mov	r5, r3
 80029d2:	f04f 0600 	mov.w	r6, #0
 80029d6:	46a9      	mov	r9, r5
 80029d8:	46b2      	mov	sl, r6
 80029da:	eb19 0309 	adds.w	r3, r9, r9
 80029de:	eb4a 040a 	adc.w	r4, sl, sl
 80029e2:	4699      	mov	r9, r3
 80029e4:	46a2      	mov	sl, r4
 80029e6:	eb19 0905 	adds.w	r9, r9, r5
 80029ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a02:	4689      	mov	r9, r1
 8002a04:	4692      	mov	sl, r2
 8002a06:	eb19 0005 	adds.w	r0, r9, r5
 8002a0a:	eb4a 0106 	adc.w	r1, sl, r6
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	461d      	mov	r5, r3
 8002a14:	f04f 0600 	mov.w	r6, #0
 8002a18:	196b      	adds	r3, r5, r5
 8002a1a:	eb46 0406 	adc.w	r4, r6, r6
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4623      	mov	r3, r4
 8002a22:	f7fd fbd1 	bl	80001c8 <__aeabi_uldivmod>
 8002a26:	4603      	mov	r3, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <UART_SetConfig+0x384>)
 8002a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2164      	movs	r1, #100	; 0x64
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	3332      	adds	r3, #50	; 0x32
 8002a40:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <UART_SetConfig+0x384>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a4e:	4498      	add	r8, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	461d      	mov	r5, r3
 8002a54:	f04f 0600 	mov.w	r6, #0
 8002a58:	46a9      	mov	r9, r5
 8002a5a:	46b2      	mov	sl, r6
 8002a5c:	eb19 0309 	adds.w	r3, r9, r9
 8002a60:	eb4a 040a 	adc.w	r4, sl, sl
 8002a64:	4699      	mov	r9, r3
 8002a66:	46a2      	mov	sl, r4
 8002a68:	eb19 0905 	adds.w	r9, r9, r5
 8002a6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a84:	4689      	mov	r9, r1
 8002a86:	4692      	mov	sl, r2
 8002a88:	eb19 0005 	adds.w	r0, r9, r5
 8002a8c:	eb4a 0106 	adc.w	r1, sl, r6
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	461d      	mov	r5, r3
 8002a96:	f04f 0600 	mov.w	r6, #0
 8002a9a:	196b      	adds	r3, r5, r5
 8002a9c:	eb46 0406 	adc.w	r4, r6, r6
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	f7fd fb90 	bl	80001c8 <__aeabi_uldivmod>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	460c      	mov	r4, r1
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <UART_SetConfig+0x384>)
 8002ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	2164      	movs	r1, #100	; 0x64
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	3332      	adds	r3, #50	; 0x32
 8002ac2:	4a07      	ldr	r2, [pc, #28]	; (8002ae0 <UART_SetConfig+0x384>)
 8002ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	f003 0207 	and.w	r2, r3, #7
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4442      	add	r2, r8
 8002ad4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ad6:	e1b2      	b.n	8002e3e <UART_SetConfig+0x6e2>
 8002ad8:	40011000 	.word	0x40011000
 8002adc:	40011400 	.word	0x40011400
 8002ae0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4ad7      	ldr	r2, [pc, #860]	; (8002e48 <UART_SetConfig+0x6ec>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d005      	beq.n	8002afa <UART_SetConfig+0x39e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4ad6      	ldr	r2, [pc, #856]	; (8002e4c <UART_SetConfig+0x6f0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	f040 80d1 	bne.w	8002c9c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002afa:	f7fe ff59 	bl	80019b0 <HAL_RCC_GetPCLK2Freq>
 8002afe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	469a      	mov	sl, r3
 8002b04:	f04f 0b00 	mov.w	fp, #0
 8002b08:	46d0      	mov	r8, sl
 8002b0a:	46d9      	mov	r9, fp
 8002b0c:	eb18 0308 	adds.w	r3, r8, r8
 8002b10:	eb49 0409 	adc.w	r4, r9, r9
 8002b14:	4698      	mov	r8, r3
 8002b16:	46a1      	mov	r9, r4
 8002b18:	eb18 080a 	adds.w	r8, r8, sl
 8002b1c:	eb49 090b 	adc.w	r9, r9, fp
 8002b20:	f04f 0100 	mov.w	r1, #0
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b34:	4688      	mov	r8, r1
 8002b36:	4691      	mov	r9, r2
 8002b38:	eb1a 0508 	adds.w	r5, sl, r8
 8002b3c:	eb4b 0609 	adc.w	r6, fp, r9
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4619      	mov	r1, r3
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	f04f 0400 	mov.w	r4, #0
 8002b52:	0094      	lsls	r4, r2, #2
 8002b54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b58:	008b      	lsls	r3, r1, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	4628      	mov	r0, r5
 8002b60:	4631      	mov	r1, r6
 8002b62:	f7fd fb31 	bl	80001c8 <__aeabi_uldivmod>
 8002b66:	4603      	mov	r3, r0
 8002b68:	460c      	mov	r4, r1
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4bb8      	ldr	r3, [pc, #736]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	469b      	mov	fp, r3
 8002b7c:	f04f 0c00 	mov.w	ip, #0
 8002b80:	46d9      	mov	r9, fp
 8002b82:	46e2      	mov	sl, ip
 8002b84:	eb19 0309 	adds.w	r3, r9, r9
 8002b88:	eb4a 040a 	adc.w	r4, sl, sl
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	46a2      	mov	sl, r4
 8002b90:	eb19 090b 	adds.w	r9, r9, fp
 8002b94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ba4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ba8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bac:	4689      	mov	r9, r1
 8002bae:	4692      	mov	sl, r2
 8002bb0:	eb1b 0509 	adds.w	r5, fp, r9
 8002bb4:	eb4c 060a 	adc.w	r6, ip, sl
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	f04f 0400 	mov.w	r4, #0
 8002bca:	0094      	lsls	r4, r2, #2
 8002bcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bd0:	008b      	lsls	r3, r1, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	4631      	mov	r1, r6
 8002bda:	f7fd faf5 	bl	80001c8 <__aeabi_uldivmod>
 8002bde:	4603      	mov	r3, r0
 8002be0:	460c      	mov	r4, r1
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b9a      	ldr	r3, [pc, #616]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002be6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	2164      	movs	r1, #100	; 0x64
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	3332      	adds	r3, #50	; 0x32
 8002bf8:	4a95      	ldr	r2, [pc, #596]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c04:	4498      	add	r8, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	469b      	mov	fp, r3
 8002c0a:	f04f 0c00 	mov.w	ip, #0
 8002c0e:	46d9      	mov	r9, fp
 8002c10:	46e2      	mov	sl, ip
 8002c12:	eb19 0309 	adds.w	r3, r9, r9
 8002c16:	eb4a 040a 	adc.w	r4, sl, sl
 8002c1a:	4699      	mov	r9, r3
 8002c1c:	46a2      	mov	sl, r4
 8002c1e:	eb19 090b 	adds.w	r9, r9, fp
 8002c22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c3a:	4689      	mov	r9, r1
 8002c3c:	4692      	mov	sl, r2
 8002c3e:	eb1b 0509 	adds.w	r5, fp, r9
 8002c42:	eb4c 060a 	adc.w	r6, ip, sl
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	f04f 0400 	mov.w	r4, #0
 8002c58:	0094      	lsls	r4, r2, #2
 8002c5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c5e:	008b      	lsls	r3, r1, #2
 8002c60:	461a      	mov	r2, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	4628      	mov	r0, r5
 8002c66:	4631      	mov	r1, r6
 8002c68:	f7fd faae 	bl	80001c8 <__aeabi_uldivmod>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b77      	ldr	r3, [pc, #476]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002c74:	fba3 1302 	umull	r1, r3, r3, r2
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	2164      	movs	r1, #100	; 0x64
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	3332      	adds	r3, #50	; 0x32
 8002c86:	4a72      	ldr	r2, [pc, #456]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	f003 020f 	and.w	r2, r3, #15
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4442      	add	r2, r8
 8002c98:	609a      	str	r2, [r3, #8]
 8002c9a:	e0d0      	b.n	8002e3e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f7fe fe74 	bl	8001988 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	469a      	mov	sl, r3
 8002ca6:	f04f 0b00 	mov.w	fp, #0
 8002caa:	46d0      	mov	r8, sl
 8002cac:	46d9      	mov	r9, fp
 8002cae:	eb18 0308 	adds.w	r3, r8, r8
 8002cb2:	eb49 0409 	adc.w	r4, r9, r9
 8002cb6:	4698      	mov	r8, r3
 8002cb8:	46a1      	mov	r9, r4
 8002cba:	eb18 080a 	adds.w	r8, r8, sl
 8002cbe:	eb49 090b 	adc.w	r9, r9, fp
 8002cc2:	f04f 0100 	mov.w	r1, #0
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cd6:	4688      	mov	r8, r1
 8002cd8:	4691      	mov	r9, r2
 8002cda:	eb1a 0508 	adds.w	r5, sl, r8
 8002cde:	eb4b 0609 	adc.w	r6, fp, r9
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	f04f 0400 	mov.w	r4, #0
 8002cf4:	0094      	lsls	r4, r2, #2
 8002cf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cfa:	008b      	lsls	r3, r1, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4623      	mov	r3, r4
 8002d00:	4628      	mov	r0, r5
 8002d02:	4631      	mov	r1, r6
 8002d04:	f7fd fa60 	bl	80001c8 <__aeabi_uldivmod>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b50      	ldr	r3, [pc, #320]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002d10:	fba3 2302 	umull	r2, r3, r3, r2
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	469b      	mov	fp, r3
 8002d1e:	f04f 0c00 	mov.w	ip, #0
 8002d22:	46d9      	mov	r9, fp
 8002d24:	46e2      	mov	sl, ip
 8002d26:	eb19 0309 	adds.w	r3, r9, r9
 8002d2a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d2e:	4699      	mov	r9, r3
 8002d30:	46a2      	mov	sl, r4
 8002d32:	eb19 090b 	adds.w	r9, r9, fp
 8002d36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d4e:	4689      	mov	r9, r1
 8002d50:	4692      	mov	sl, r2
 8002d52:	eb1b 0509 	adds.w	r5, fp, r9
 8002d56:	eb4c 060a 	adc.w	r6, ip, sl
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	f04f 0400 	mov.w	r4, #0
 8002d6c:	0094      	lsls	r4, r2, #2
 8002d6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d72:	008b      	lsls	r3, r1, #2
 8002d74:	461a      	mov	r2, r3
 8002d76:	4623      	mov	r3, r4
 8002d78:	4628      	mov	r0, r5
 8002d7a:	4631      	mov	r1, r6
 8002d7c:	f7fd fa24 	bl	80001c8 <__aeabi_uldivmod>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002d88:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	2164      	movs	r1, #100	; 0x64
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	3332      	adds	r3, #50	; 0x32
 8002d9a:	4a2d      	ldr	r2, [pc, #180]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da6:	4498      	add	r8, r3
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	469b      	mov	fp, r3
 8002dac:	f04f 0c00 	mov.w	ip, #0
 8002db0:	46d9      	mov	r9, fp
 8002db2:	46e2      	mov	sl, ip
 8002db4:	eb19 0309 	adds.w	r3, r9, r9
 8002db8:	eb4a 040a 	adc.w	r4, sl, sl
 8002dbc:	4699      	mov	r9, r3
 8002dbe:	46a2      	mov	sl, r4
 8002dc0:	eb19 090b 	adds.w	r9, r9, fp
 8002dc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dc8:	f04f 0100 	mov.w	r1, #0
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ddc:	4689      	mov	r9, r1
 8002dde:	4692      	mov	sl, r2
 8002de0:	eb1b 0509 	adds.w	r5, fp, r9
 8002de4:	eb4c 060a 	adc.w	r6, ip, sl
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	f04f 0400 	mov.w	r4, #0
 8002dfa:	0094      	lsls	r4, r2, #2
 8002dfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e00:	008b      	lsls	r3, r1, #2
 8002e02:	461a      	mov	r2, r3
 8002e04:	4623      	mov	r3, r4
 8002e06:	4628      	mov	r0, r5
 8002e08:	4631      	mov	r1, r6
 8002e0a:	f7fd f9dd 	bl	80001c8 <__aeabi_uldivmod>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460c      	mov	r4, r1
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002e16:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2164      	movs	r1, #100	; 0x64
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <UART_SetConfig+0x6f4>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4442      	add	r2, r8
 8002e3a:	609a      	str	r2, [r3, #8]
}
 8002e3c:	e7ff      	b.n	8002e3e <UART_SetConfig+0x6e2>
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e48:	40011000 	.word	0x40011000
 8002e4c:	40011400 	.word	0x40011400
 8002e50:	51eb851f 	.word	0x51eb851f

08002e54 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
 8002e60:	4613      	mov	r3, r2
 8002e62:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2108      	movs	r1, #8
 8002e6c:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <LIS3DSH_WriteIO+0x4c>)
 8002e6e:	f7fe f943 	bl	80010f8 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8002e72:	f107 010f 	add.w	r1, r7, #15
 8002e76:	230a      	movs	r3, #10
 8002e78:	2201      	movs	r2, #1
 8002e7a:	480a      	ldr	r0, [pc, #40]	; (8002ea4 <LIS3DSH_WriteIO+0x50>)
 8002e7c:	f7fe fe10 	bl	8001aa0 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8002e80:	79bb      	ldrb	r3, [r7, #6]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	230a      	movs	r3, #10
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <LIS3DSH_WriteIO+0x50>)
 8002e8a:	f7fe fe09 	bl	8001aa0 <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8002e8e:	2201      	movs	r2, #1
 8002e90:	2108      	movs	r1, #8
 8002e92:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <LIS3DSH_WriteIO+0x4c>)
 8002e94:	f7fe f930 	bl	80010f8 <HAL_GPIO_WritePin>
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	20000038 	.word	0x20000038

08002ea8 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2108      	movs	r1, #8
 8002ec6:	4818      	ldr	r0, [pc, #96]	; (8002f28 <LIS3DSH_ReadIO+0x80>)
 8002ec8:	f7fe f916 	bl	80010f8 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8002ecc:	f107 0108 	add.w	r1, r7, #8
 8002ed0:	230a      	movs	r3, #10
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4815      	ldr	r0, [pc, #84]	; (8002f2c <LIS3DSH_ReadIO+0x84>)
 8002ed6:	f7fe fde3 	bl	8001aa0 <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8002eda:	79bb      	ldrb	r3, [r7, #6]
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	f107 0108 	add.w	r1, r7, #8
 8002ee2:	230a      	movs	r3, #10
 8002ee4:	4811      	ldr	r0, [pc, #68]	; (8002f2c <LIS3DSH_ReadIO+0x84>)
 8002ee6:	f7fe ff0f 	bl	8001d08 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8002eea:	2201      	movs	r2, #1
 8002eec:	2108      	movs	r1, #8
 8002eee:	480e      	ldr	r0, [pc, #56]	; (8002f28 <LIS3DSH_ReadIO+0x80>)
 8002ef0:	f7fe f902 	bl	80010f8 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
 8002ef8:	e00c      	b.n	8002f14 <LIS3DSH_ReadIO+0x6c>
	{
		dataR[i] = spiBuf[i];
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	6839      	ldr	r1, [r7, #0]
 8002f00:	440b      	add	r3, r1
 8002f02:	f107 0110 	add.w	r1, r7, #16
 8002f06:	440a      	add	r2, r1
 8002f08:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8002f0c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	3301      	adds	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	79bb      	ldrb	r3, [r7, #6]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	dbec      	blt.n	8002efa <LIS3DSH_ReadIO+0x52>
	}
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	20000038 	.word	0x20000038

08002f30 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8002f3e:	2258      	movs	r2, #88	; 0x58
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	485b      	ldr	r0, [pc, #364]	; (80030b0 <LIS3DSH_Init+0x180>)
 8002f44:	f000 fa66 	bl	8003414 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	78db      	ldrb	r3, [r3, #3]
 8002f4c:	b25b      	sxtb	r3, r3
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	b25a      	sxtb	r2, r3
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	b25b      	sxtb	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	f023 030f 	bic.w	r3, r3, #15
 8002f6a:	b25a      	sxtb	r2, r3
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	4313      	orrs	r3, r2
 8002f72:	b25b      	sxtb	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8002f78:	f107 030f 	add.w	r3, r7, #15
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4619      	mov	r1, r3
 8002f80:	2020      	movs	r0, #32
 8002f82:	f7ff ff67 	bl	8002e54 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	789b      	ldrb	r3, [r3, #2]
 8002f8e:	b25b      	sxtb	r3, r3
 8002f90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f94:	b25a      	sxtb	r2, r3
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	b25b      	sxtb	r3, r3
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	785b      	ldrb	r3, [r3, #1]
 8002fa6:	b25b      	sxtb	r3, r3
 8002fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fac:	b25a      	sxtb	r2, r3
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8002fba:	f107 030f 	add.w	r3, r7, #15
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	2024      	movs	r0, #36	; 0x24
 8002fc4:	f7ff ff46 	bl	8002e54 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	791b      	ldrb	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8002fd0:	2388      	movs	r3, #136	; 0x88
 8002fd2:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8002fd4:	f107 030f 	add.w	r3, r7, #15
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4619      	mov	r1, r3
 8002fdc:	2023      	movs	r0, #35	; 0x23
 8002fde:	f7ff ff39 	bl	8002e54 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d858      	bhi.n	800309c <LIS3DSH_Init+0x16c>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <LIS3DSH_Init+0xc0>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003075 	.word	0x08003075
 8002ff4:	0800309d 	.word	0x0800309d
 8002ff8:	0800309d 	.word	0x0800309d
 8002ffc:	0800309d 	.word	0x0800309d
 8003000:	0800309d 	.word	0x0800309d
 8003004:	0800309d 	.word	0x0800309d
 8003008:	0800309d 	.word	0x0800309d
 800300c:	0800309d 	.word	0x0800309d
 8003010:	0800307d 	.word	0x0800307d
 8003014:	0800309d 	.word	0x0800309d
 8003018:	0800309d 	.word	0x0800309d
 800301c:	0800309d 	.word	0x0800309d
 8003020:	0800309d 	.word	0x0800309d
 8003024:	0800309d 	.word	0x0800309d
 8003028:	0800309d 	.word	0x0800309d
 800302c:	0800309d 	.word	0x0800309d
 8003030:	08003085 	.word	0x08003085
 8003034:	0800309d 	.word	0x0800309d
 8003038:	0800309d 	.word	0x0800309d
 800303c:	0800309d 	.word	0x0800309d
 8003040:	0800309d 	.word	0x0800309d
 8003044:	0800309d 	.word	0x0800309d
 8003048:	0800309d 	.word	0x0800309d
 800304c:	0800309d 	.word	0x0800309d
 8003050:	0800308d 	.word	0x0800308d
 8003054:	0800309d 	.word	0x0800309d
 8003058:	0800309d 	.word	0x0800309d
 800305c:	0800309d 	.word	0x0800309d
 8003060:	0800309d 	.word	0x0800309d
 8003064:	0800309d 	.word	0x0800309d
 8003068:	0800309d 	.word	0x0800309d
 800306c:	0800309d 	.word	0x0800309d
 8003070:	08003095 	.word	0x08003095
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8003074:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <LIS3DSH_Init+0x184>)
 8003076:	4a10      	ldr	r2, [pc, #64]	; (80030b8 <LIS3DSH_Init+0x188>)
 8003078:	601a      	str	r2, [r3, #0]
			break;
 800307a:	e00f      	b.n	800309c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 800307c:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <LIS3DSH_Init+0x184>)
 800307e:	4a0f      	ldr	r2, [pc, #60]	; (80030bc <LIS3DSH_Init+0x18c>)
 8003080:	601a      	str	r2, [r3, #0]
			break;
 8003082:	e00b      	b.n	800309c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <LIS3DSH_Init+0x184>)
 8003086:	4a0e      	ldr	r2, [pc, #56]	; (80030c0 <LIS3DSH_Init+0x190>)
 8003088:	601a      	str	r2, [r3, #0]
			break;
 800308a:	e007      	b.n	800309c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <LIS3DSH_Init+0x184>)
 800308e:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <LIS3DSH_Init+0x194>)
 8003090:	601a      	str	r2, [r3, #0]
			break;
 8003092:	e003      	b.n	800309c <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8003094:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <LIS3DSH_Init+0x184>)
 8003096:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <LIS3DSH_Init+0x198>)
 8003098:	601a      	str	r2, [r3, #0]
			break;
 800309a:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 800309c:	2201      	movs	r2, #1
 800309e:	2108      	movs	r1, #8
 80030a0:	480a      	ldr	r0, [pc, #40]	; (80030cc <LIS3DSH_Init+0x19c>)
 80030a2:	f7fe f829 	bl	80010f8 <HAL_GPIO_WritePin>
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000038 	.word	0x20000038
 80030b4:	2000000c 	.word	0x2000000c
 80030b8:	3d75c28f 	.word	0x3d75c28f
 80030bc:	3df5c28f 	.word	0x3df5c28f
 80030c0:	3e3851ec 	.word	0x3e3851ec
 80030c4:	3e75c28f 	.word	0x3e75c28f
 80030c8:	3f3ae148 	.word	0x3f3ae148
 80030cc:	40021000 	.word	0x40021000

080030d0 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	2202      	movs	r2, #2
 80030de:	4619      	mov	r1, r3
 80030e0:	2028      	movs	r0, #40	; 0x28
 80030e2:	f7ff fee1 	bl	8002ea8 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 80030e6:	7d7b      	ldrb	r3, [r7, #21]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	7d3b      	ldrb	r3, [r7, #20]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	2202      	movs	r2, #2
 8003100:	4619      	mov	r1, r3
 8003102:	202a      	movs	r0, #42	; 0x2a
 8003104:	f7ff fed0 	bl	8002ea8 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8003108:	7d7b      	ldrb	r3, [r7, #21]
 800310a:	b29b      	uxth	r3, r3
 800310c:	021b      	lsls	r3, r3, #8
 800310e:	b29a      	uxth	r2, r3
 8003110:	7d3b      	ldrb	r3, [r7, #20]
 8003112:	b29b      	uxth	r3, r3
 8003114:	4413      	add	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	b21b      	sxth	r3, r3
 800311a:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2202      	movs	r2, #2
 8003122:	4619      	mov	r1, r3
 8003124:	202c      	movs	r0, #44	; 0x2c
 8003126:	f7ff febf 	bl	8002ea8 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800312a:	7d7b      	ldrb	r3, [r7, #21]
 800312c:	b29b      	uxth	r3, r3
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	b29a      	uxth	r2, r3
 8003132:	7d3b      	ldrb	r3, [r7, #20]
 8003134:	b29b      	uxth	r3, r3
 8003136:	4413      	add	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	b21b      	sxth	r3, r3
 800313c:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	461a      	mov	r2, r3
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	6010      	str	r0, [r2, #0]
 800314a:	889b      	ldrh	r3, [r3, #4]
 800314c:	8093      	strh	r3, [r2, #4]
	
}
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08c      	sub	sp, #48	; 0x30
 800315c:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();
 800315e:	f107 031c 	add.w	r3, r7, #28
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff ffb4 	bl	80030d0 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8003168:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800316c:	ee07 3a90 	vmov	s15, r3
 8003170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003174:	4b31      	ldr	r3, [pc, #196]	; (800323c <LIS3DSH_GetDataScaled+0xe4>)
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <LIS3DSH_GetDataScaled+0xe8>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003188:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003244 <LIS3DSH_GetDataScaled+0xec>
 800318c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <LIS3DSH_GetDataScaled+0xf0>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319a:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 800319e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <LIS3DSH_GetDataScaled+0xe4>)
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <LIS3DSH_GetDataScaled+0xf4>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003244 <LIS3DSH_GetDataScaled+0xec>
 80031c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <LIS3DSH_GetDataScaled+0xf8>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d0:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 80031d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <LIS3DSH_GetDataScaled+0xe4>)
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <LIS3DSH_GetDataScaled+0xfc>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003244 <LIS3DSH_GetDataScaled+0xec>
 80031f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031fc:	4b16      	ldr	r3, [pc, #88]	; (8003258 <LIS3DSH_GetDataScaled+0x100>)
 80031fe:	edd3 7a00 	vldr	s15, [r3]
 8003202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003206:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 800320a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800320e:	f107 0210 	add.w	r2, r7, #16
 8003212:	ca07      	ldmia	r2, {r0, r1, r2}
 8003214:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800321a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	ee06 1a90 	vmov	s13, r1
 8003222:	ee07 2a10 	vmov	s14, r2
 8003226:	ee07 3a90 	vmov	s15, r3
}
 800322a:	eeb0 0a66 	vmov.f32	s0, s13
 800322e:	eef0 0a47 	vmov.f32	s1, s14
 8003232:	eeb0 1a67 	vmov.f32	s2, s15
 8003236:	3730      	adds	r7, #48	; 0x30
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	2000000c 	.word	0x2000000c
 8003240:	20000010 	.word	0x20000010
 8003244:	00000000 	.word	0x00000000
 8003248:	20000090 	.word	0x20000090
 800324c:	20000014 	.word	0x20000014
 8003250:	20000094 	.word	0x20000094
 8003254:	20000018 	.word	0x20000018
 8003258:	20000098 	.word	0x20000098

0800325c <LIS3DSH_PollDRDY>:
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 8003264:	f7fd fc6e 	bl	8000b44 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 800326a:	f107 030b 	add.w	r3, r7, #11
 800326e:	2201      	movs	r2, #1
 8003270:	4619      	mov	r1, r3
 8003272:	2027      	movs	r0, #39	; 0x27
 8003274:	f7ff fe18 	bl	8002ea8 <LIS3DSH_ReadIO>
		if(Acc_status & 0x07)break;
 8003278:	7afb      	ldrb	r3, [r7, #11]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <LIS3DSH_PollDRDY+0x42>
		
	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 8003282:	7afb      	ldrb	r3, [r7, #11]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	2b00      	cmp	r3, #0
 800328a:	d109      	bne.n	80032a0 <LIS3DSH_PollDRDY+0x44>
 800328c:	f7fd fc5a 	bl	8000b44 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d8e6      	bhi.n	800326a <LIS3DSH_PollDRDY+0xe>
 800329c:	e000      	b.n	80032a0 <LIS3DSH_PollDRDY+0x44>
		if(Acc_status & 0x07)break;
 800329e:	bf00      	nop
	if(Acc_status & 0x07)
 80032a0:	7afb      	ldrb	r3, [r7, #11]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <LIS3DSH_PollDRDY+0x52>
	{
		return true;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <LIS3DSH_PollDRDY+0x54>
	}
	return false;
 80032ae:	2300      	movs	r3, #0
	
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <LIS3DSH_X_calibrate>:

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	ed87 0a01 	vstr	s0, [r7, #4]
 80032c2:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 80032c6:	ed97 7a00 	vldr	s14, [r7]
 80032ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80032d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <LIS3DSH_X_calibrate+0x50>)
 80032dc:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 80032e0:	ed97 7a00 	vldr	s14, [r7]
 80032e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032ec:	eddf 6a07 	vldr	s13, [pc, #28]	; 800330c <LIS3DSH_X_calibrate+0x54>
 80032f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <LIS3DSH_X_calibrate+0x58>)
 80032f6:	edc3 7a00 	vstr	s15, [r3]
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000090 	.word	0x20000090
 800330c:	44fa0000 	.word	0x44fa0000
 8003310:	20000010 	.word	0x20000010

08003314 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	ed87 0a01 	vstr	s0, [r7, #4]
 800331e:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 8003322:	ed97 7a00 	vldr	s14, [r7]
 8003326:	edd7 7a01 	vldr	s15, [r7, #4]
 800332a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800332e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <LIS3DSH_Y_calibrate+0x50>)
 8003338:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 800333c:	ed97 7a00 	vldr	s14, [r7]
 8003340:	edd7 7a01 	vldr	s15, [r7, #4]
 8003344:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003348:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003368 <LIS3DSH_Y_calibrate+0x54>
 800334c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <LIS3DSH_Y_calibrate+0x58>)
 8003352:	edc3 7a00 	vstr	s15, [r3]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000094 	.word	0x20000094
 8003368:	44fa0000 	.word	0x44fa0000
 800336c:	20000014 	.word	0x20000014

08003370 <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	ed87 0a01 	vstr	s0, [r7, #4]
 800337a:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 800337e:	ed97 7a00 	vldr	s14, [r7]
 8003382:	edd7 7a01 	vldr	s15, [r7, #4]
 8003386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800338a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800338e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003392:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <LIS3DSH_Z_calibrate+0x50>)
 8003394:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 8003398:	ed97 7a00 	vldr	s14, [r7]
 800339c:	edd7 7a01 	vldr	s15, [r7, #4]
 80033a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033a4:	eddf 6a07 	vldr	s13, [pc, #28]	; 80033c4 <LIS3DSH_Z_calibrate+0x54>
 80033a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ac:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <LIS3DSH_Z_calibrate+0x58>)
 80033ae:	edc3 7a00 	vstr	s15, [r3]
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000098 	.word	0x20000098
 80033c4:	44fa0000 	.word	0x44fa0000
 80033c8:	20000018 	.word	0x20000018

080033cc <__libc_init_array>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4e0d      	ldr	r6, [pc, #52]	; (8003404 <__libc_init_array+0x38>)
 80033d0:	4c0d      	ldr	r4, [pc, #52]	; (8003408 <__libc_init_array+0x3c>)
 80033d2:	1ba4      	subs	r4, r4, r6
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	2500      	movs	r5, #0
 80033d8:	42a5      	cmp	r5, r4
 80033da:	d109      	bne.n	80033f0 <__libc_init_array+0x24>
 80033dc:	4e0b      	ldr	r6, [pc, #44]	; (800340c <__libc_init_array+0x40>)
 80033de:	4c0c      	ldr	r4, [pc, #48]	; (8003410 <__libc_init_array+0x44>)
 80033e0:	f000 f82c 	bl	800343c <_init>
 80033e4:	1ba4      	subs	r4, r4, r6
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	2500      	movs	r5, #0
 80033ea:	42a5      	cmp	r5, r4
 80033ec:	d105      	bne.n	80033fa <__libc_init_array+0x2e>
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033f4:	4798      	blx	r3
 80033f6:	3501      	adds	r5, #1
 80033f8:	e7ee      	b.n	80033d8 <__libc_init_array+0xc>
 80033fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033fe:	4798      	blx	r3
 8003400:	3501      	adds	r5, #1
 8003402:	e7f2      	b.n	80033ea <__libc_init_array+0x1e>
 8003404:	08003474 	.word	0x08003474
 8003408:	08003474 	.word	0x08003474
 800340c:	08003474 	.word	0x08003474
 8003410:	08003478 	.word	0x08003478

08003414 <memcpy>:
 8003414:	b510      	push	{r4, lr}
 8003416:	1e43      	subs	r3, r0, #1
 8003418:	440a      	add	r2, r1
 800341a:	4291      	cmp	r1, r2
 800341c:	d100      	bne.n	8003420 <memcpy+0xc>
 800341e:	bd10      	pop	{r4, pc}
 8003420:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003424:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003428:	e7f7      	b.n	800341a <memcpy+0x6>

0800342a <memset>:
 800342a:	4402      	add	r2, r0
 800342c:	4603      	mov	r3, r0
 800342e:	4293      	cmp	r3, r2
 8003430:	d100      	bne.n	8003434 <memset+0xa>
 8003432:	4770      	bx	lr
 8003434:	f803 1b01 	strb.w	r1, [r3], #1
 8003438:	e7f9      	b.n	800342e <memset+0x4>
	...

0800343c <_init>:
 800343c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343e:	bf00      	nop
 8003440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003442:	bc08      	pop	{r3}
 8003444:	469e      	mov	lr, r3
 8003446:	4770      	bx	lr

08003448 <_fini>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	bf00      	nop
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr
